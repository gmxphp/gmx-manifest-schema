{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "GMX Framework Manifest Schema",
    "description": "Schema for GMX Framework manifest.yml configuration file",
    "type": "object",
    "required": [
        "name",
        "version"
    ],
    "properties": {
        "name": {
            "type": "string",
            "description": "Unique name of the module (camelCase, lowercase start)",
            "pattern": "^[a-z][a-zA-Z0-9]*$"
        },
        "version": {
            "type": "string",
            "description": "Module version in SemVer format",
            "pattern": "^\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-.]*)*$"
        },
        "description": {
            "type": "string",
            "description": "Brief description of the module's purpose"
        },
        "class": {
            "type": "string",
            "description": "Relative path to main class from module root (e.g., 'App')"
        },
        "preload": {
            "type": "boolean",
            "description": "Whether to preload the module on framework startup",
            "default": false
        },
        "requires": {
            "oneOf": [
                {
                    "type": "array",
                    "description": "Dependencies on other modules",
                    "items": {
                        "type": "object",
                        "required": [
                            "name",
                            "version"
                        ],
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Name of the required module"
                            },
                            "version": {
                                "type": "string",
                                "description": "Required version or range"
                            },
                            "optional": {
                                "type": "boolean",
                                "description": "Is the dependency optional",
                                "default": false
                            }
                        }
                    }
                },
                {
                    "type": "object",
                    "description": "Dependencies on other modules as key-value pairs",
                    "additionalProperties": {
                        "type": "string",
                        "description": "Required version or range"
                    }
                }
            ]
        },
        "middleware": {
            "oneOf": [
                {
                    "type": "string",
                    "description": "Single global middleware in format 'module@component.method' or 'component.method'",
                    "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                },
                {
                    "type": "array",
                    "description": "List of global middleware configurations",
                    "items": {
                        "type": "string",
                        "description": "Middleware in format 'module@component.method' or 'component.method'",
                        "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                    }
                },
                {
                    "type": "object",
                    "description": "Middleware configuration with before/after separation",
                    "properties": {
                        "before": {
                            "type": "array",
                            "description": "Middleware executed before the main chain",
                            "items": {
                                "type": "string",
                                "description": "Middleware in format 'module@component.method' or 'component.method'",
                                "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                            }
                        },
                        "after": {
                            "type": "array",
                            "description": "Middleware executed after the main chain",
                            "items": {
                                "type": "string",
                                "description": "Middleware in format 'module@component.method' or 'component.method'",
                                "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                            }
                        }
                    }
                }
            ]
        },
        "bootstrap": {
            "type": "object",
            "description": "Components to initialize on framework startup",
            "propertyNames": {
                "pattern": "^[a-z][a-zA-Z0-9]*$"
            },
            "additionalProperties": {
                "type": "object",
                "required": [
                    "class"
                ],
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "Relative path to class from module root (e.g., 'lib\\service\\UserService')"
                    },
                    "params": {
                        "type": "array",
                        "description": "Parameters for the class constructor"
                    },
                    "port": {
                        "type": "boolean",
                        "description": "Expose component via the port system for inter-module access",
                        "default": false
                    },
                    "use_di": {
                        "type": "boolean",
                        "description": "Use Dependency Injection for this component",
                        "default": true
                    },
                    "shared": {
                        "type": "boolean",
                        "description": "Use singleton pattern (single instance)",
                        "default": true
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Apply DI rules to subclasses",
                        "default": true
                    },
                    "bindings": {
                        "type": "object",
                        "description": "Custom dependency bindings for DI",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Class path to use instead of the specified interface/class"
                        }
                    },
                    "map": {
                        "type": "string",
                        "description": "Rule for mapping interface to implementation"
                    },
                    "call": {
                        "type": "array",
                        "description": "Methods to call after instance creation",
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "description": "Method name without parameters"
                                },
                                {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "description": "Parameters for the method call"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "di": {
            "type": "array",
            "description": "Global Dependency Injection configuration rules",
            "items": {
                "type": "object",
                "required": [
                    "class"
                ],
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "Relative path to class or interface from module root"
                    },
                    "params": {
                        "type": "array",
                        "description": "Parameters for the class constructor"
                    },
                    "shared": {
                        "type": "boolean",
                        "description": "Use singleton pattern (single instance)",
                        "default": true
                    },
                    "inherit": {
                        "type": "boolean",
                        "description": "Apply DI rules to subclasses",
                        "default": true
                    },
                    "bindings": {
                        "type": "object",
                        "description": "Custom dependency bindings for DI",
                        "additionalProperties": {
                            "type": "string",
                            "description": "Relative path to class that will replace the specified interface/class"
                        }
                    },
                    "map": {
                        "type": "string",
                        "description": "Map an interface to a specific implementation"
                    },
                    "call": {
                        "type": "array",
                        "description": "Methods to call after instance creation",
                        "items": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "description": "Method name without parameters"
                                },
                                {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "description": "Parameters for the method call"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "tasks": {
            "type": "object",
            "description": "Background tasks and queue configurations",
            "additionalProperties": {
                "type": "object",
                "required": [
                    "handler"
                ],
                "properties": {
                    "handler": {
                        "type": "string",
                        "description": "Task handler in format 'component.method' or relative path 'lib\\task\\TaskClass.method'"
                    },
                    "params": {
                        "type": "array",
                        "description": "Parameters passed to the handler"
                    },
                    "schedule": {
                        "type": "object",
                        "description": "Scheduling configuration for periodic tasks",
                        "properties": {
                            "cron": {
                                "type": "string",
                                "description": "Cron expression for task scheduling"
                            },
                            "async": {
                                "type": "boolean",
                                "description": "Execute task asynchronously",
                                "default": false
                            },
                            "priority": {
                                "type": "integer",
                                "description": "Execution priority (1 is highest)",
                                "default": 1000
                            },
                            "solo": {
                                "type": "boolean",
                                "description": "Allow only one instance in cluster",
                                "default": false
                            },
                            "overlap": {
                                "type": "integer",
                                "description": "Overlap protection time in seconds",
                                "default": 3600
                            },
                            "cluster": {
                                "type": "boolean",
                                "description": "Enable cluster mode with Redis",
                                "default": true
                            }
                        }
                    },
                    "worker": {
                        "type": "object",
                        "description": "Configuration for queue workers",
                        "properties": {
                            "batch_size": {
                                "type": "integer",
                                "description": "Number of tasks processed per cycle",
                                "default": 10
                            },
                            "default_start_id": {
                                "type": "string",
                                "description": "Starting ID for reading group ('0' for start, '$' for new only)",
                                "default": "0"
                            },
                            "expected_duration": {
                                "type": "integer",
                                "description": "Expected task processing duration limit in seconds",
                                "default": 3600
                            },
                            "max_message_age": {
                                "type": "integer",
                                "description": "Maximum age of messages in seconds",
                                "default": 86400
                            },
                            "max_retries": {
                                "type": "integer",
                                "description": "Maximum retries on task failure",
                                "default": 3
                            },
                            "max_runtime": {
                                "type": "integer",
                                "description": "Maximum runtime for worker in seconds",
                                "default": 3600
                            },
                            "max_stream_size": {
                                "type": "integer",
                                "description": "Maximum size of the stream",
                                "default": 100000
                            },
                            "use_claim_pending": {
                                "type": "boolean",
                                "description": "Claim pending messages from PEL queue",
                                "default": true
                            }
                        }
                    },
                    "log": {
                        "type": "object",
                        "description": "Logging configuration for tasks",
                        "properties": {
                            "output": {
                                "type": "string",
                                "description": "Full path to the log file"
                            },
                            "append": {
                                "type": "boolean",
                                "description": "Append data to existing log file",
                                "default": false
                            }
                        }
                    }
                }
            }
        },
        "events": {
            "type": "object",
            "description": "Event listeners and handlers configuration",
            "additionalProperties": {
                "type": "array",
                "description": "List of listeners for the event",
                "items": {
                    "type": "object",
                    "anyOf": [
                        {
                            "required": [
                                "handler"
                            ]
                        },
                        {
                            "required": [
                                "queue"
                            ]
                        }
                    ],
                    "properties": {
                        "handler": {
                            "type": "string",
                            "description": "Event handler in format 'component.method' or relative path 'lib\\event\\EventHandler.method'"
                        },
                        "priority": {
                            "type": "integer",
                            "description": "Event priority (1 is highest)",
                            "default": 1000
                        },
                        "queue": {
                            "type": "string",
                            "description": "Queue name for asynchronous event processing"
                        }
                    }
                }
            }
        },
        "routes": {
            "type": "array",
            "description": "HTTP route definitions for the module",
            "items": {
                "type": "object",
                "required": [
                    "path",
                    "method",
                    "handler"
                ],
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "URL path with optional dynamic segments (e.g., '/users/@id:[0-9]+')"
                    },
                    "method": {
                        "type": "string",
                        "description": "HTTP method or multiple methods separated by '|' (e.g., 'GET' or 'GET|POST')",
                        "oneOf": [
                            {
                                "enum": [
                                    "GET",
                                    "POST",
                                    "PUT",
                                    "DELETE",
                                    "PATCH",
                                    "OPTIONS",
                                    "HEAD"
                                ]
                            },
                            {
                                "pattern": "^(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD)(\\|(GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD))+$"
                            }
                        ]
                    },
                    "handler": {
                        "type": "string",
                        "description": "Route handler in format 'component.method' or relative path 'lib\\controller\\ControllerClass.method'"
                    },
                    "params": {
                        "type": "array",
                        "description": "Parameters passed to the handler"
                    },
                    "middleware": {
                        "oneOf": [
                            {
                                "type": "string",
                                "description": "Single middleware in format 'module@component.method' or 'component.method'",
                                "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                            },
                            {
                                "type": "array",
                                "description": "List of middleware configurations",
                                "items": {
                                    "type": "string",
                                    "description": "Middleware in format 'module@component.method' or 'component.method'",
                                    "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                                }
                            },
                            {
                                "type": "object",
                                "description": "Middleware configuration with before/after separation",
                                "properties": {
                                    "before": {
                                        "type": "array",
                                        "description": "Middleware executed before the main chain",
                                        "items": {
                                            "type": "string",
                                            "description": "Middleware in format 'module@component.method' or 'component.method'",
                                            "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                                        }
                                    },
                                    "after": {
                                        "type": "array",
                                        "description": "Middleware executed after the main chain",
                                        "items": {
                                            "type": "string",
                                            "description": "Middleware in format 'module@component.method' or 'component.method'",
                                            "pattern": "^([a-z][a-zA-Z0-9]*@)?[a-z][a-zA-Z0-9]*\\.[a-z][a-zA-Z0-9]*$"
                                        }
                                    }
                                }
                            }
                        ]
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique identifier for the route (used for acl/logging/debugging)"
                    }
                }
            }
        },
        "config": {
            "type": "object",
            "description": "Environment-specific configuration variables for the module",
            "additionalProperties": true
        }
    }
}